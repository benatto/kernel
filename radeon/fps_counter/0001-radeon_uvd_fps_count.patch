--- linux/drivers/gpu/drm/radeon/radeon_uvd.c	2014-03-21 12:07:07.950187912 -0300
+++ linux-devel/drivers/gpu/drm/radeon/radeon_uvd.c	2014-03-24 17:48:57.069911640 -0300
@@ -30,6 +30,7 @@
 
 #include <linux/firmware.h>
 #include <linux/module.h>
+#include <linux/jiffies.h>
 #include <drm/drmP.h>
 #include <drm/drm.h>
 
@@ -762,16 +763,53 @@
 
 	*sd = 0;
 	*hd = 0;
-
+	
 	for (i = 0; i < RADEON_MAX_UVD_HANDLES; ++i) {
 		if (!atomic_read(&rdev->uvd.handles[i]))
 			continue;
 
-		if (rdev->uvd.img_size[i] >= 720*576)
-			++(*hd);
-		else
-			++(*sd);
+		if (rdev->uvd.img_size[i] >= 720*576) {
+			if (rdev->pm.fps > 30)
+				(*hd) = (*hd) + 2;
+			else
+				++(*hd);
+		} else {
+			if (rdev->pm.fps > 30)
+				(*sd) = (*sd) + 2;
+			else
+				++(*sd);
+		}
+	}
+}
+
+/**
+ * radeon_uvd_fps_count - estimate how much FPS rate
+ *
+ * @rdev: radeon_device pointer
+ *
+ * Estimate FPS count sent down to video card
+ */
+
+static void radeon_uvd_fps_count(struct radeon_device *rdev)
+{
+	unsigned long ctime = 0;
+	unsigned long etime;
+	static u8 fps = 0;
+
+	/*Current time in seconds*/
+	ctime = jiffies;
+
+	/*Calculating elapsed time in seconds*/
+	etime = (ctime/HZ) - (rdev->pm.fps_timestamp/HZ);
+
+	if (etime >= 1) {
+		rdev->pm.fps = fps;
+		fps = 0;
+	} else {
+		fps++;
 	}
+
+	rdev->pm.fps_timestamp = ctime;
 }
 
 static void radeon_uvd_idle_work_handler(struct work_struct *work)
@@ -800,9 +838,13 @@
 	set_clocks &= schedule_delayed_work(&rdev->uvd.idle_work,
 					    msecs_to_jiffies(UVD_IDLE_TIMEOUT_MS));
 
+
+	radeon_uvd_fps_count(rdev);
+
 	if ((rdev->pm.pm_method == PM_METHOD_DPM) && rdev->pm.dpm_enabled) {
 		unsigned hd = 0, sd = 0;
 		radeon_uvd_count_handles(rdev, &sd, &hd);
+	
 		if ((rdev->pm.dpm.sd != sd) ||
 		    (rdev->pm.dpm.hd != hd)) {
 			rdev->pm.dpm.sd = sd;
