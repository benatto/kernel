diff --git a/drivers/gpu/drm/radeon/radeon_uvd.c b/drivers/gpu/drm/radeon/radeon_uvd.c
index 1b65ae2..c103d69 100644
--- a/drivers/gpu/drm/radeon/radeon_uvd.c
+++ b/drivers/gpu/drm/radeon/radeon_uvd.c
@@ -53,6 +53,7 @@ MODULE_FIRMWARE(FIRMWARE_TAHITI);
 MODULE_FIRMWARE(FIRMWARE_BONAIRE);
 
 static void radeon_uvd_idle_work_handler(struct work_struct *work);
+static int radeon_uvd_init_fpsinfo(struct radeon_device *rdev);
 
 int radeon_uvd_init(struct radeon_device *rdev)
 {
@@ -153,6 +154,13 @@ int radeon_uvd_init(struct radeon_device *rdev)
 		rdev->uvd.img_size[i] = 0;
 	}
 
+	r = radeon_uvd_init_fpsinfo(rdev);
+
+	if (r) {
+		dev_err(rdev->dev, "(%d) UVD FPS info init failed\n", r);
+		return r;
+	}
+
 	return 0;
 }
 
@@ -177,6 +185,26 @@ void radeon_uvd_fini(struct radeon_device *rdev)
 	release_firmware(rdev->uvd_fw);
 }
 
+static int radeon_uvd_init_fpsinfo(struct radeon_device *rdev)
+{
+	int i;
+	
+	rdev->uvd.fps_info = kmalloc(sizeof(struct radeon_fps)
+								, GFP_KERNEL);
+
+	if (!rdev->uvd.fps_info) {
+		dev_err(rdev->dev, "UVD fps info creation failed\n");
+		return -ENOMEM;
+	}
+
+	rdev->uvd.fps_info->tick_index = 0;
+	
+	for (i = 0; i < TICKEVENTS_MAX; i++)
+		rdev->uvd.fps_info->tick_events[i] = 0;
+
+	return 0;	
+}
+
 int radeon_uvd_suspend(struct radeon_device *rdev)
 {
 	unsigned size;
@@ -772,10 +800,17 @@ static void radeon_uvd_count_handles(struct radeon_device *rdev,
 		if (!atomic_read(&rdev->uvd.handles[i]))
 			continue;
 
-		if (rdev->uvd.img_size[i] >= 720*576)
-			++(*hd);
-		else
-			++(*sd);
+		if (rdev->uvd.img_size[i] >= 720*576) {
+			if (rdev->uvd.fps_info->fps_rate <= 30)
+				++(*hd);
+			else
+				(*hd) += 2;
+		} else {
+			if (rdev->uvd.fps_info->fps_rate <= 30)
+				++(*sd);
+			else
+				(*sd) += 2;
+		}
 	}
 }
 
@@ -798,6 +833,65 @@ static void radeon_uvd_idle_work_handler(struct work_struct *work)
 	}
 }
 
+static void radeon_uvd_update_fps_rate(struct radeon_device *rdev)
+{
+	u8 first_run = 1, fps_rate = 0, i;
+	u32 count = 0;
+
+	i = rdev->uvd.fps_info->event_index;
+
+	while (first_run || i != rdev->uvd.fps_info->event_index) {
+		count += rdev->uvd.fps_info->fps_events[i];
+
+		i++;
+
+		if (i >= RADEON_FPS_EVENTS_MAX) 
+			i = i % RADEON_FPS_EVENTS_MAX;
+
+		first_run=0;		
+	}
+
+	fps_rate = count / RADEON_FPS_EVENTS_MAX;
+
+	rdev->uvd.fps_info->fps_rate = fps_rate;
+}
+
+static void radeon_uvd_fps_count(struct radeon_device *rdev)
+{
+	unsigned long ctime = 0, ltime = 0, etime = 0;
+	static int fps_counter = 0;
+	u8 index;
+
+	/*current time in seconds*/
+	ctime = jiffies/HZ;
+	/*last time stamp in seconds*/
+	ltime = rdev->uvd.fps_info->fps_timestamp/HZ;
+
+	etime = ctime - ltime;
+
+	fps_counter++;
+
+	if (etime >= 1) {
+		index = rdev->uvd.fps_info->event_index;
+
+		rdev->uvd.fps_info->fps_events[index] = fps_counter;
+		fps_counter = 0;
+
+		index++;
+
+		if (index >= RADEON_FPS_EVENTS_MAX) 
+			index = index % RADEON_FPS_MAX;
+
+		rdev->uvd.fps_info->event_index = index;
+
+
+		/*__dump_tick_events(rdev);*/
+		radeon_uvd_update_fps_rate(rdev);
+	}
+
+	rdev->uvd.fps_info->fps_timestamp = jiffies;
+}
+
 void radeon_uvd_note_usage(struct radeon_device *rdev)
 {
 	bool streams_changed = false;
@@ -805,6 +899,8 @@ void radeon_uvd_note_usage(struct radeon_device *rdev)
 	set_clocks &= schedule_delayed_work(&rdev->uvd.idle_work,
 					    msecs_to_jiffies(UVD_IDLE_TIMEOUT_MS));
 
+	radeon_uvd_fps_count(rdev);
+
 	if ((rdev->pm.pm_method == PM_METHOD_DPM) && rdev->pm.dpm_enabled) {
 		unsigned hd = 0, sd = 0;
 		radeon_uvd_count_handles(rdev, &sd, &hd);
